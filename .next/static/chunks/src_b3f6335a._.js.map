{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/lib/utils.ts"],"sourcesContent":["import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,SAAS,GAAG,GAAG,MAAoB;IACxC,OAAO,CAAA,GAAA,8JAAA,CAAA,UAAO,AAAD,EAAE,CAAA,GAAA,wIAAA,CAAA,OAAI,AAAD,EAAE;AACtB","debugId":null}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":["file:///project/sandbox/user-workspace/src/components/ui/CashCounter.tsx"],"sourcesContent":["\"use client\";\n\nimport React, { useState, ChangeEvent } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\n// List of available denominations\nconst denominations = [500, 200, 100, 50, 20, 10, 5, 2, 1];\n\n// Type for the counts object\ntype Counts = {\n  [denom: number]: number;\n};\n\nexport default function CashCounter() {\n  // Initialize counts for each denomination to 0\n  const [counts, setCounts] = useState<Counts>(\n    denominations.reduce((acc, denom) => ({ ...acc, [denom]: 0 }), {})\n  );\n\n  // State for errors per denomination\n  const [errors, setErrors] = useState<{ [denom: number]: string }>({});\n\n  // Handle input change event\n  const handleInputChange = (denom: number) => (e: ChangeEvent<HTMLInputElement>) => {\n    const value = e.target.value;\n    \n    // Allow empty string for better UX\n    if (value === \"\") {\n      setCounts((prev) => ({ ...prev, [denom]: 0 }));\n      setErrors((prev) => ({ ...prev, [denom]: \"\" }));\n      return;\n    }\n\n    const numberValue = Number(value);\n    \n    // Check for non-number or negative values\n    if (isNaN(numberValue) || numberValue < 0) {\n      setErrors((prev) => ({ ...prev, [denom]: \"Please enter a valid non-negative number\" }));\n    } else {\n      // Clear any previous error and update count\n      setErrors((prev) => ({ ...prev, [denom]: \"\" }));\n      setCounts((prev) => ({ ...prev, [denom]: Math.floor(numberValue) }));\n    }\n  };\n\n  // Calculate total cash amount\n  const total = denominations.reduce((sum, denom) => sum + denom * counts[denom], 0);\n\n  // Reset all counts to zero\n  const handleReset = () => {\n    setCounts(denominations.reduce((acc, denom) => ({ ...acc, [denom]: 0 }), {}));\n    setErrors({});\n  };\n\n  // Format currency for display\n  const formatCurrency = (amount: number) => {\n    return new Intl.NumberFormat('en-IN', {\n      style: 'currency',\n      currency: 'INR',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(amount);\n  };\n\n  return (\n    <div className=\"bg-card border border-border rounded-lg shadow-sm p-6 space-y-6\">\n      <div className=\"text-center space-y-2\">\n        <h2 className=\"text-2xl font-semibold text-card-foreground\">Cash Counter</h2>\n        <p className=\"text-muted-foreground text-sm\">Enter the count for each denomination</p>\n      </div>\n      \n      <div className=\"space-y-4\">\n        {denominations.map((denom) => (\n          <div key={denom} className=\"space-y-2\">\n            <div className=\"flex items-center justify-between\">\n              <label \n                htmlFor={`note-${denom}`} \n                className=\"text-sm font-medium text-card-foreground flex items-center gap-2\"\n              >\n                <span className=\"bg-primary text-primary-foreground px-2 py-1 rounded text-xs font-semibold min-w-[60px] text-center\">\n                  ₹{denom}\n                </span>\n                <span>× Count</span>\n              </label>\n              <div className=\"text-sm text-muted-foreground\">\n                = {formatCurrency(denom * counts[denom])}\n              </div>\n            </div>\n            \n            <input\n              id={`note-${denom}`}\n              type=\"number\"\n              min=\"0\"\n              step=\"1\"\n              value={counts[denom] || \"\"}\n              onChange={handleInputChange(denom)}\n              placeholder=\"0\"\n              className={cn(\n                \"w-full px-3 py-2 border rounded-md text-sm\",\n                \"focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent\",\n                \"bg-background text-foreground\",\n                errors[denom] \n                  ? \"border-destructive focus:ring-destructive\" \n                  : \"border-input hover:border-ring/50\"\n              )}\n            />\n            \n            {errors[denom] && (\n              <p className=\"text-destructive text-xs mt-1\">{errors[denom]}</p>\n            )}\n          </div>\n        ))}\n      </div>\n\n      <div className=\"border-t border-border pt-4 space-y-4\">\n        <div className=\"bg-muted/50 rounded-lg p-4\">\n          <div className=\"flex justify-between items-center\">\n            <span className=\"text-lg font-semibold text-card-foreground\">Total Amount:</span>\n            <span className=\"text-2xl font-bold text-primary\">\n              {formatCurrency(total)}\n            </span>\n          </div>\n        </div>\n        \n        <button\n          onClick={handleReset}\n          className={cn(\n            \"w-full py-3 px-4 rounded-md font-medium text-sm transition-colors\",\n            \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n            \"focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\"\n          )}\n        >\n          Reset All Counts\n        </button>\n      </div>\n    </div>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}